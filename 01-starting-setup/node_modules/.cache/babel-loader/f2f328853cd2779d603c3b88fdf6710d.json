{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\beadi\\\\Desktop\\\\Programming\\\\Web Dev\\\\React\\\\027 01-starting-setup\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\NewExpense.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ExpenseForm from './ExpenseForm';\nimport './NewExpense.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewExpense = props => {\n  _s();\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  const saveExpenseDataHandler = enteredExpenseData => {\n    const expense = { ...enteredExpenseData,\n      id: Math.random().toString()\n    };\n    props.onAddExpense(expense); // console.log(expense);\n\n    setIsEditing(false);\n  };\n\n  const startEditingHandler = () => {\n    setIsEditing(true);\n  };\n\n  const stopEditingHandler = () => {\n    setIsEditing(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: [!isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startEditingHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 24\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: saveExpenseDataHandler,\n      onCancel: stopEditingHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, this);\n};\n\n_s(NewExpense, \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n_c = NewExpense;\nexport default NewExpense; //NOTE: To move data up (from child to parent), we can pass functions as props in the parent to the child and then use the data in the function in the child component\n\nvar _c;\n\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"sources":["C:/Users/beadi/Desktop/Programming/Web Dev/React/027 01-starting-setup/01-starting-setup/src/components/NewExpense/NewExpense.js"],"names":["React","useState","ExpenseForm","NewExpense","props","isEditing","setIsEditing","saveExpenseDataHandler","enteredExpenseData","expense","id","Math","random","toString","onAddExpense","startEditingHandler","stopEditingHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,kBAAP;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMM,sBAAsB,GAAIC,kBAAD,IAAwB;AACnD,UAAMC,OAAO,GAAG,EACZ,GAAGD,kBADS;AAEZE,MAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd;AAFQ,KAAhB;AAKAT,IAAAA,KAAK,CAACU,YAAN,CAAmBL,OAAnB,EANmD,CAOnD;;AACAH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GATD;;AAWA,QAAMS,mBAAmB,GAAG,MAAM;AAC9BT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMU,kBAAkB,GAAG,MAAM;AAC7BV,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFD;;AAIA,sBAAO;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,eACF,CAACD,SAAD,iBAAc;AAAQ,MAAA,OAAO,EAAEU,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADZ,EAEFV,SAAS,iBAAI,QAAC,WAAD;AAAa,MAAA,iBAAiB,EAAIE,sBAAlC;AAA0D,MAAA,QAAQ,EAAES;AAApE;AAAA;AAAA;AAAA;AAAA,YAFX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,CA1BD;;GAAMb,U;;KAAAA,U;AA4BN,eAAeA,UAAf,C,CAEA","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport ExpenseForm from './ExpenseForm';\r\nimport './NewExpense.css';\r\n\r\nconst NewExpense = (props) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const saveExpenseDataHandler = (enteredExpenseData) => {\r\n        const expense = {\r\n            ...enteredExpenseData,\r\n            id: Math.random().toString()\r\n        }\r\n\r\n        props.onAddExpense(expense);\r\n        // console.log(expense);\r\n        setIsEditing(false);\r\n    }\r\n\r\n    const startEditingHandler = () => {\r\n        setIsEditing(true);\r\n    }\r\n\r\n    const stopEditingHandler = () => {\r\n        setIsEditing(false);\r\n    }\r\n\r\n    return <div className=\"new-expense\">\r\n        {!isEditing && <button onClick={startEditingHandler}>Add New Expense</button>}\r\n        {isEditing && <ExpenseForm onSaveExpenseData = {saveExpenseDataHandler} onCancel={stopEditingHandler}></ExpenseForm>}\r\n    </div>\r\n};\r\n\r\nexport default NewExpense;\r\n\r\n//NOTE: To move data up (from child to parent), we can pass functions as props in the parent to the child and then use the data in the function in the child component"]},"metadata":{},"sourceType":"module"}